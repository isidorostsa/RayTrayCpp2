#pragma once

#include "hittable.h"

using std::make_shared;
using std::shared_ptr;

hittable_list: type = {
    this: hittable;

    using hittable::hit_record;

    public objects: std::vector<shared_ptr<hittable>>;

    clear: (inout this) objects.clear();

    add: (inout this, obj: shared_ptr<hittable>) objects.push_back(obj);
    
    hit: (
        final this,
        r: ray,
        ray_interval: interval;
    ) -> (record: std::optional<hit_record>) = {
        record = std::nullopt;

        // Changed this to use a "and_then" instead of 
        // Doing a manual record = obj.hit ... .or_else(:() record)
        // Still questionable
        (copy curr_interv := ray_interval)
        for objects do (obj) 
        {
            _ = obj*.
                hit(r, curr_interv).
                and_then(:(move t: hit_record) -> _ == {
                    curr_interv&$*.set_max(t.dist_to_point); 
                    record&$* = t;
                    return std::optional<std::monostate>();
                }
            );
        }
    }
 
}