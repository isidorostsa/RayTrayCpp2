#pragma once

#include "hittable.h"

using std::make_shared;
using std::shared_ptr;

hittable_list: type = {
    this: hittable;

    using hittable::hit_record;

    public objects: std::vector<shared_ptr<hittable>>;

    clear: (inout this) objects.clear();

    add: (inout this, obj: shared_ptr<hittable>) objects.push_back(obj);
    
    hit: (
        final this,
        r: ray,
        ray_interval: interval;
    ) -> (record: std::optional<hit_record>) = {
        record = std::nullopt;

        // Seems weird bad, untested performance
        for objects do (obj) {
            record = obj*.
                        hit(
                            r,        // ray
                            record.   // interval
                                transform(
                                    :(t) interval(
                                        ray_interval.min,
                                        t.dist_to_point
                                    )
                                ).
                                value_or(ray_interval)
                        ).
                        or_else(:() record);

        }
    }
 
}