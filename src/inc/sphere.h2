#pragma once

#include "hittable.h"

sphere: type = {
    this: hittable;
    using hittable::hit_record;

    private center: point3;
    private radious: double;

    get_center: (this) center;
    get_radious: (this) radious;

    operator=: (out this, c: point3, r: double) = {
        hittable = _;
        center = c;
        radious = r;
    }

    hit: (
        final this,
        r: ray,
        ray_interval: interval
    ) -> std::optional<hit_record> == {
        orig_to_ct := center - r.origin();

        a := r.direction().length_squared();
        h := dot(r.direction(), orig_to_ct);
        c := orig_to_ct.length_squared() - radious*radious;

        /*
            such that t = (h +/- sqrt(h^2 - ac)) / a
            implies that the point p = ray.at(t) is on the 
            surface of the sphere with the given center and 
            radius. If p is a single point then it is on the 
            border of the sphere from our pov. If it is 2 points
            then the ray is going through the sphere and one of 
            the points is the entry and the other the exit.

            We only have one sphere, in front of the camera,
            so t is always non-negative. Thus, the (-) solution
            is a smaller number and represents the entry point.
        */

        discriminant := h*h - a*c;
        discriminant_sqrt := std::sqrt(discriminant);

        // Find closest root that is also in the given range
        root: std::optional<double>; 
        /*
            this particular piece of code has gone through 3 iterations:

            1) Initialize the optional to nullopt and change if needed in 
               the following clause
            
            This leaked the "candidate_root" parameter to the rest
            of the function, and I thought that since we are using
            an optional to avoid missusing the root's value when we should
            not, we should not allow using "candidate_root" either. 
            
            Also this made it possible to forget to set root.
            
            2) Do the same computations but initialize with the return value
               of a lambda that is called immediately.

            However C++2 offers a better alternative: Checked 
            uninitialized variables. This has the added benefit that 
            it is impossible to forget to initialze root.

            3) Do the same computations in a clause that initializes root.

            4) Do the same in an 'if' with a definition statement.
        */

        (copy candidate_root := (h - discriminant_sqrt) / a) 
        if ray_interval.surrounds(candidate_root) {
            root = candidate_root;
        } else {
            candidate_root = (h - discriminant_sqrt) / a;
            if ray_interval.surrounds(candidate_root) {
                root = candidate_root;
            } else {
                root = std::nullopt;
            }
        }

 
        /*
        Design choice: making root inaccessible if found_root is false
        */

        return root.transform(
            :(root_val: double) -> hit_record = {
                record := hit_record();

                record.contact_point = r.at(root_val);
                record.reflective_normal = (record.contact_point - center) / radious;
                record.dist_to_point = root_val;
                record.hit_front_face = (dot(r.direction(), record.reflective_normal) < 0);

                if !record.hit_front_face {
                    record.reflective_normal *= -1;
                }

                return record;
            }
        );
    }

}